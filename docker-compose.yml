

x-airflow-common: &airflow-common
  image: apache/airflow:2.7.1
  environment:
    AIRFLOW__CORE__EXECUTOR: CeleryExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres:5432/airflow
    AIRFLOW__CELERY__BROKER_URL: redis://redis:6379/0
    AIRFLOW__CORE__FERNET_KEY: "n8HcrIWnCcu8Pxx-_osmSE-ONo7ZL9WRcyJZ341dr7U="
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session'
    AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
    PIP_ADDITIONAL_REQUIREMENTS: "pandas sqlalchemy"
  volumes:
    - C:/Users/regi_/OneDrive/Documents/Github_/airflow_docker/dags:/opt/airflow/dags
    - C:/Users/regi_/OneDrive/Documents/Github_/airflow_docker/logs:/opt/airflow/logs
    - C:/Users/regi_/OneDrive/Documents/Github_/airflow_docker/plugins:/opt/airflow/plugins
    - C:/Users/regi_/OneDrive/Documents/Github_/airflow_docker/datasets:/opt/airflow/datasets
    - C:/Users/regi_/OneDrive/Documents/Github_/airflow_docker/data:/opt/airflow/data

services:
  postgres:
    image: postgres:14
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U airflow"]
      interval: 10s
      retries: 5
      start_period: 5s
    restart: always

  redis:
    image: redis:7.2-bookworm
    expose:
      - 6379
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      retries: 5
      start_period: 5s
    restart: always

  airflow-init:
    <<: *airflow-common
    command: ["bash", "/opt/airflow/init.sh"]
    volumes:
      - ./init.sh:/opt/airflow/init.sh
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

  airflow-webserver:
    <<: *airflow-common
    command: webserver
    ports:
      - "8080:8080"
    depends_on:
      airflow-init:
        condition: service_completed_successfully
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: always

  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    depends_on:
      airflow-init:
        condition: service_completed_successfully
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: always

  airflow-worker:
    <<: *airflow-common
    command: celery worker
    depends_on:
      airflow-init:
        condition: service_completed_successfully
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: always

  airflow-triggerer:
    <<: *airflow-common
    command: triggerer
    depends_on:
      airflow-init:
        condition: service_completed_successfully
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: always
